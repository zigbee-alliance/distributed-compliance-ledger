// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator/validator_missed_block_bit_array.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorMissedBlockBitArray struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Index   uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *ValidatorMissedBlockBitArray) Reset()         { *m = ValidatorMissedBlockBitArray{} }
func (m *ValidatorMissedBlockBitArray) String() string { return proto.CompactTextString(m) }
func (*ValidatorMissedBlockBitArray) ProtoMessage()    {}
func (*ValidatorMissedBlockBitArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9f941c0b09681fa, []int{0}
}
func (m *ValidatorMissedBlockBitArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorMissedBlockBitArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorMissedBlockBitArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorMissedBlockBitArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorMissedBlockBitArray.Merge(m, src)
}
func (m *ValidatorMissedBlockBitArray) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorMissedBlockBitArray) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorMissedBlockBitArray.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorMissedBlockBitArray proto.InternalMessageInfo

func (m *ValidatorMissedBlockBitArray) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValidatorMissedBlockBitArray) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*ValidatorMissedBlockBitArray)(nil), "zigbeealliance.distributedcomplianceledger.validator.ValidatorMissedBlockBitArray")
}

func init() {
	proto.RegisterFile("validator/validator_missed_block_bit_array.proto", fileDescriptor_d9f941c0b09681fa)
}

var fileDescriptor_d9f941c0b09681fa = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0x80, 0x63, 0xc4, 0x8f, 0xc8, 0x18, 0x31, 0x64, 0x40, 0x56, 0xc5, 0xd4, 0x25, 0x31, 0x12,
	0xbc, 0x00, 0x19, 0x91, 0x60, 0xe8, 0xc0, 0xc0, 0x12, 0xd9, 0xb9, 0x53, 0x38, 0xe1, 0xd4, 0x91,
	0x7d, 0x45, 0x2d, 0x4f, 0xc1, 0x63, 0x31, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0xa0, 0xd6, 0x4a, 0xcb,
	0x76, 0xdf, 0x0d, 0x9f, 0xbe, 0xbb, 0xf4, 0xf6, 0x43, 0x5b, 0x02, 0xcd, 0xce, 0xab, 0xc3, 0x54,
	0x77, 0x14, 0x02, 0x42, 0x6d, 0xac, 0x6b, 0xde, 0x6b, 0x43, 0x5c, 0x6b, 0xef, 0xf5, 0xa6, 0xec,
	0xbd, 0x63, 0x97, 0xdd, 0x7f, 0x52, 0x6b, 0x10, 0xb5, 0xb5, 0xa4, 0x97, 0x0d, 0x96, 0x40, 0x81,
	0x3d, 0x99, 0x15, 0x23, 0x34, 0xae, 0xeb, 0xe3, 0xd6, 0x22, 0xb4, 0xe8, 0xcb, 0x83, 0xf2, 0xe6,
	0x39, 0xbd, 0x7e, 0x99, 0xe0, 0x69, 0xaf, 0xaf, 0x76, 0xf6, 0x8a, 0xf8, 0x61, 0xe7, 0xce, 0xf2,
	0xf4, 0x42, 0x03, 0x78, 0x0c, 0x21, 0x17, 0x33, 0x31, 0xbf, 0x5c, 0x4c, 0x98, 0x5d, 0xa5, 0x67,
	0xb4, 0x04, 0x5c, 0xe7, 0x27, 0x33, 0x31, 0x3f, 0x5d, 0x44, 0xa8, 0xe0, 0x7b, 0x90, 0x62, 0x3b,
	0x48, 0xf1, 0x3b, 0x48, 0xf1, 0x35, 0xca, 0x64, 0x3b, 0xca, 0xe4, 0x67, 0x94, 0xc9, 0xeb, 0x63,
	0x4b, 0xfc, 0xb6, 0x32, 0x65, 0xe3, 0x3a, 0x15, 0x53, 0x8b, 0xa9, 0x55, 0xfd, 0x6b, 0x2d, 0x8e,
	0xb1, 0x45, 0xac, 0x55, 0xeb, 0xe3, 0x0b, 0x14, 0x6f, 0x7a, 0x0c, 0xe6, 0x7c, 0x7f, 0xf2, 0xdd,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x10, 0x5e, 0x0d, 0x26, 0x01, 0x00, 0x00,
}

func (m *ValidatorMissedBlockBitArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorMissedBlockBitArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorMissedBlockBitArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintValidatorMissedBlockBitArray(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintValidatorMissedBlockBitArray(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidatorMissedBlockBitArray(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidatorMissedBlockBitArray(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorMissedBlockBitArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovValidatorMissedBlockBitArray(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovValidatorMissedBlockBitArray(uint64(m.Index))
	}
	return n
}

func sovValidatorMissedBlockBitArray(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidatorMissedBlockBitArray(x uint64) (n int) {
	return sovValidatorMissedBlockBitArray(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorMissedBlockBitArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorMissedBlockBitArray
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorMissedBlockBitArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorMissedBlockBitArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorMissedBlockBitArray
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidatorMissedBlockBitArray
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorMissedBlockBitArray
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorMissedBlockBitArray
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorMissedBlockBitArray(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidatorMissedBlockBitArray
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidatorMissedBlockBitArray(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidatorMissedBlockBitArray
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorMissedBlockBitArray
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorMissedBlockBitArray
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidatorMissedBlockBitArray
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidatorMissedBlockBitArray
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidatorMissedBlockBitArray
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidatorMissedBlockBitArray        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidatorMissedBlockBitArray          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidatorMissedBlockBitArray = fmt.Errorf("proto: unexpected end of group")
)
