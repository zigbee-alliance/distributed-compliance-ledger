syntax = "proto3";
package zigbeealliance.distributedcomplianceledger.pki;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "pki/approved_certificates.proto";
import "pki/proposed_certificate.proto";
import "pki/child_certificates.proto";
import "pki/proposed_certificate_revocation.proto";
import "pki/revoked_certificates.proto";
import "pki/approved_root_certificates.proto";
import "pki/revoked_root_certificates.proto";
import "pki/approved_certificates_by_subject.proto";
import "pki/rejected_certificate.proto";
import "pki/pki_revocation_distribution_point.proto";
import "pki/pki_revocation_distribution_points_by_issuer_subject_key_id.proto";
import "pki/noc_root_certificates.proto";
import "pki/noc_certificates.proto";
// this line is used by starport scaffolding # 1
import "gogoproto/gogo.proto";


import "cosmos_proto/cosmos.proto";

option go_package = "github.com/zigbee-alliance/distributed-compliance-ledger/x/pki/types";


// Query defines the gRPC querier service.
service Query {
    // Queries a ApprovedCertificates by index.
	rpc ApprovedCertificates(QueryGetApprovedCertificatesRequest) returns (QueryGetApprovedCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/certificates/{subject}/{subjectKeyId}";
	}

	// Queries a list of ApprovedCertificates items.
	rpc ApprovedCertificatesAll(QueryAllApprovedCertificatesRequest) returns (QueryAllApprovedCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/certificates";
	}

// Queries a ProposedCertificate by index.
	rpc ProposedCertificate(QueryGetProposedCertificateRequest) returns (QueryGetProposedCertificateResponse) {
		option (google.api.http).get = "/dcl/pki/proposed-certificates/{subject}/{subjectKeyId}";
	}

	// Queries a list of ProposedCertificate items.
	rpc ProposedCertificateAll(QueryAllProposedCertificateRequest) returns (QueryAllProposedCertificateResponse) {
		option (google.api.http).get = "/dcl/pki/proposed-certificates";
	}

// Queries a ChildCertificates by index.
	rpc ChildCertificates(QueryGetChildCertificatesRequest) returns (QueryGetChildCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/child-certificates/{issuer}/{authorityKeyId}";
	}

// Queries a ProposedCertificateRevocation by index.
	rpc ProposedCertificateRevocation(QueryGetProposedCertificateRevocationRequest) returns (QueryGetProposedCertificateRevocationResponse) {
		option (google.api.http).get = "/dcl/pki/proposed-revocation-certificates/{subject}/{subjectKeyId}";
	}

	// Queries a list of ProposedCertificateRevocation items.
	rpc ProposedCertificateRevocationAll(QueryAllProposedCertificateRevocationRequest) returns (QueryAllProposedCertificateRevocationResponse) {
		option (google.api.http).get = "/dcl/pki/proposed-revocation-certificates";
	}

// Queries a RevokedCertificates by index.
	rpc RevokedCertificates(QueryGetRevokedCertificatesRequest) returns (QueryGetRevokedCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/revoked-certificates/{subject}/{subjectKeyId}";
	}

	// Queries a list of RevokedCertificates items.
	rpc RevokedCertificatesAll(QueryAllRevokedCertificatesRequest) returns (QueryAllRevokedCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/revoked-certificates";
	}

// Queries a ApprovedRootCertificates by index.
	rpc ApprovedRootCertificates(QueryGetApprovedRootCertificatesRequest) returns (QueryGetApprovedRootCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/root-certificates";
	}
// Queries a RevokedRootCertificates by index.
	rpc RevokedRootCertificates(QueryGetRevokedRootCertificatesRequest) returns (QueryGetRevokedRootCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/revoked-root-certificates";
	}
// Queries a ApprovedCertificatesBySubject by index.
	rpc ApprovedCertificatesBySubject(QueryGetApprovedCertificatesBySubjectRequest) returns (QueryGetApprovedCertificatesBySubjectResponse) {
		option (google.api.http).get = "/dcl/pki/certificates/{subject}";
	}


// Queries a RejectedCertificate by index.
	rpc RejectedCertificate(QueryGetRejectedCertificatesRequest) returns (QueryGetRejectedCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/rejected-certificates/{subject}/{subjectKeyId}";
	}

	// Queries a list of RejectedCertificate items.
	rpc RejectedCertificateAll(QueryAllRejectedCertificatesRequest) returns (QueryAllRejectedCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/rejected-certificates";
	}

// Queries a PkiRevocationDistributionPoint by index.
	rpc PkiRevocationDistributionPoint(QueryGetPkiRevocationDistributionPointRequest) returns (QueryGetPkiRevocationDistributionPointResponse) {
		option (google.api.http).get = "/dcl/pki/revocation-points/{issuerSubjectKeyID}/{vid}/{label}";
	}

	// Queries a list of PkiRevocationDistributionPoint items.
	rpc PkiRevocationDistributionPointAll(QueryAllPkiRevocationDistributionPointRequest) returns (QueryAllPkiRevocationDistributionPointResponse) {
		option (google.api.http).get = "/dcl/pki/revocation-points";
	}

// Queries a PkiRevocationDistributionPointsByIssuerSubjectKeyID by index.
	rpc PkiRevocationDistributionPointsByIssuerSubjectKeyID(QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) returns (QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) {
		option (google.api.http).get = "/dcl/pki/revocation-points/{issuerSubjectKeyID}";
	}

// Queries a NocRootCertificates by index.
	rpc NocRootCertificates(QueryGetNocRootCertificatesRequest) returns (QueryGetNocRootCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/noc-root-certificates/{vid}";
	}

	// Queries a list of NocRootCertificates items.
	rpc NocRootCertificatesAll(QueryAllNocRootCertificatesRequest) returns (QueryAllNocRootCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/noc-root-certificates";
	}

// Queries a NocCertificates by index.
	rpc NocCertificates(QueryGetNocCertificatesRequest) returns (QueryGetNocCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/noc-certificates/{vid}";
	}

	// Queries a list of NocCertificates items.
	rpc NocCertificatesAll(QueryAllNocCertificatesRequest) returns (QueryAllNocCertificatesResponse) {
		option (google.api.http).get = "/dcl/pki/noc-certificates";
	}

// this line is used by starport scaffolding # 2
}

message QueryGetApprovedCertificatesRequest {
	  string subject = 1;
  string subjectKeyId = 2;

}

message QueryGetApprovedCertificatesResponse {
	ApprovedCertificates approvedCertificates = 1 [(gogoproto.nullable) = false];
}

message QueryAllApprovedCertificatesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
	string subjectKeyId = 2;
}

message QueryAllApprovedCertificatesResponse {
	repeated ApprovedCertificates approvedCertificates = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetProposedCertificateRequest {
	  string subject = 1;
  string subjectKeyId = 2;

}

message QueryGetProposedCertificateResponse {
	ProposedCertificate proposedCertificate = 1 [(gogoproto.nullable) = false];
}

message QueryAllProposedCertificateRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProposedCertificateResponse {
	repeated ProposedCertificate proposedCertificate = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetChildCertificatesRequest {
	  string issuer = 1;
  string authorityKeyId = 2;

}

message QueryGetChildCertificatesResponse {
	ChildCertificates childCertificates = 1 [(gogoproto.nullable) = false];
}

message QueryGetProposedCertificateRevocationRequest {
	string subject = 1;
  string subjectKeyId = 2;
	string serialNumber = 3;
}

message QueryGetProposedCertificateRevocationResponse {
	ProposedCertificateRevocation proposedCertificateRevocation = 1 [(gogoproto.nullable) = false];
}

message QueryAllProposedCertificateRevocationRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProposedCertificateRevocationResponse {
	repeated ProposedCertificateRevocation proposedCertificateRevocation = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetRevokedCertificatesRequest {
	  string subject = 1;
  string subjectKeyId = 2;

}

message QueryGetRevokedCertificatesResponse {
	RevokedCertificates revokedCertificates = 1 [(gogoproto.nullable) = false];
}

message QueryAllRevokedCertificatesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRevokedCertificatesResponse {
	repeated RevokedCertificates revokedCertificates = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetApprovedRootCertificatesRequest {}

message QueryGetApprovedRootCertificatesResponse {
	ApprovedRootCertificates approvedRootCertificates = 1 [(gogoproto.nullable) = false];
}
message QueryGetRevokedRootCertificatesRequest {}

message QueryGetRevokedRootCertificatesResponse {
	RevokedRootCertificates revokedRootCertificates = 1 [(gogoproto.nullable) = false];
}
message QueryGetApprovedCertificatesBySubjectRequest {
	  string subject = 1;

}

message QueryGetApprovedCertificatesBySubjectResponse {
	ApprovedCertificatesBySubject approvedCertificatesBySubject = 1 [(gogoproto.nullable) = false];
}

message QueryGetRejectedCertificatesRequest {
	  string subject = 1;
  string subjectKeyId = 2;

}

message QueryGetRejectedCertificatesResponse {
	RejectedCertificate rejectedCertificate = 1 [(gogoproto.nullable) = false];
}

message QueryAllRejectedCertificatesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRejectedCertificatesResponse {
	repeated RejectedCertificate rejectedCertificate = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPkiRevocationDistributionPointRequest {
	  int32 vid = 1;
  string label = 2;
  string issuerSubjectKeyID = 3;

}

message QueryGetPkiRevocationDistributionPointResponse {
	PkiRevocationDistributionPoint PkiRevocationDistributionPoint = 1 [(gogoproto.nullable) = false];
}

message QueryAllPkiRevocationDistributionPointRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPkiRevocationDistributionPointResponse {
	repeated PkiRevocationDistributionPoint PkiRevocationDistributionPoint = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest {
	  string issuerSubjectKeyID = 1;

}

message QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse {
	PkiRevocationDistributionPointsByIssuerSubjectKeyID pkiRevocationDistributionPointsByIssuerSubjectKeyID = 1 [(gogoproto.nullable) = false];
}

message QueryGetNocRootCertificatesRequest {
	  int32 vid = 1;

}

message QueryGetNocRootCertificatesResponse {
	NocRootCertificates nocRootCertificates = 1 [(gogoproto.nullable) = false];
}

message QueryAllNocRootCertificatesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNocRootCertificatesResponse {
	repeated NocRootCertificates nocRootCertificates = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetNocCertificatesRequest {
	  int32 vid = 1;
}

message QueryGetNocCertificatesResponse {
	NocCertificates nocCertificates = 1 [(gogoproto.nullable) = false];
}

message QueryAllNocCertificatesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNocCertificatesResponse {
	repeated NocCertificates nocCertificates = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
