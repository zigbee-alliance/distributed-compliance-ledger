// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreateModel } from "./types/zigbeealliance/distributedcomplianceledger/model/tx";
import { MsgUpdateModel } from "./types/zigbeealliance/distributedcomplianceledger/model/tx";
import { MsgUpdateModelVersion } from "./types/zigbeealliance/distributedcomplianceledger/model/tx";
import { MsgDeleteModel } from "./types/zigbeealliance/distributedcomplianceledger/model/tx";
import { MsgDeleteModelVersion } from "./types/zigbeealliance/distributedcomplianceledger/model/tx";
import { MsgCreateModelVersion } from "./types/zigbeealliance/distributedcomplianceledger/model/tx";

import { Model as typeModel} from "./types"
import { ModelVersion as typeModelVersion} from "./types"
import { ModelVersions as typeModelVersions} from "./types"
import { Product as typeProduct} from "./types"
import { VendorProducts as typeVendorProducts} from "./types"

export { MsgCreateModel, MsgUpdateModel, MsgUpdateModelVersion, MsgDeleteModel, MsgDeleteModelVersion, MsgCreateModelVersion };

type sendMsgCreateModelParams = {
  value: MsgCreateModel,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateModelParams = {
  value: MsgUpdateModel,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateModelVersionParams = {
  value: MsgUpdateModelVersion,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteModelParams = {
  value: MsgDeleteModel,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteModelVersionParams = {
  value: MsgDeleteModelVersion,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateModelVersionParams = {
  value: MsgCreateModelVersion,
  fee?: StdFee,
  memo?: string
};


type msgCreateModelParams = {
  value: MsgCreateModel,
};

type msgUpdateModelParams = {
  value: MsgUpdateModel,
};

type msgUpdateModelVersionParams = {
  value: MsgUpdateModelVersion,
};

type msgDeleteModelParams = {
  value: MsgDeleteModel,
};

type msgDeleteModelVersionParams = {
  value: MsgDeleteModelVersion,
};

type msgCreateModelVersionParams = {
  value: MsgCreateModelVersion,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreateModel({ value, fee, memo }: sendMsgCreateModelParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateModel: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateModel({ value: MsgCreateModel.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateModel: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateModel({ value, fee, memo }: sendMsgUpdateModelParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateModel: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateModel({ value: MsgUpdateModel.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateModel: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateModelVersion({ value, fee, memo }: sendMsgUpdateModelVersionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateModelVersion: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateModelVersion({ value: MsgUpdateModelVersion.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateModelVersion: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteModel({ value, fee, memo }: sendMsgDeleteModelParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteModel: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteModel({ value: MsgDeleteModel.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteModel: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteModelVersion({ value, fee, memo }: sendMsgDeleteModelVersionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteModelVersion: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteModelVersion({ value: MsgDeleteModelVersion.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteModelVersion: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateModelVersion({ value, fee, memo }: sendMsgCreateModelVersionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateModelVersion: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateModelVersion({ value: MsgCreateModelVersion.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateModelVersion: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreateModel({ value }: msgCreateModelParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.model.MsgCreateModel", value: MsgCreateModel.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateModel: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateModel({ value }: msgUpdateModelParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.model.MsgUpdateModel", value: MsgUpdateModel.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateModel: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateModelVersion({ value }: msgUpdateModelVersionParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.model.MsgUpdateModelVersion", value: MsgUpdateModelVersion.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateModelVersion: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteModel({ value }: msgDeleteModelParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.model.MsgDeleteModel", value: MsgDeleteModel.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteModel: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteModelVersion({ value }: msgDeleteModelVersionParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.model.MsgDeleteModelVersion", value: MsgDeleteModelVersion.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteModelVersion: Could not create message: ' + e.message)
			}
		},
		
		msgCreateModelVersion({ value }: msgCreateModelVersionParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.model.MsgCreateModelVersion", value: MsgCreateModelVersion.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateModelVersion: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Model: getStructure(typeModel.fromPartial({})),
						ModelVersion: getStructure(typeModelVersion.fromPartial({})),
						ModelVersions: getStructure(typeModelVersions.fromPartial({})),
						Product: getStructure(typeProduct.fromPartial({})),
						VendorProducts: getStructure(typeVendorProducts.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			ZigbeeallianceDistributedcomplianceledgerModel: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;