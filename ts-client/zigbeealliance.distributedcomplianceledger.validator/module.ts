// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgEnableValidator } from "./types/zigbeealliance/distributedcomplianceledger/validator/tx";
import { MsgCreateValidator } from "./types/zigbeealliance/distributedcomplianceledger/validator/tx";
import { MsgRejectDisableValidator } from "./types/zigbeealliance/distributedcomplianceledger/validator/tx";
import { MsgProposeDisableValidator } from "./types/zigbeealliance/distributedcomplianceledger/validator/tx";
import { MsgDisableValidator } from "./types/zigbeealliance/distributedcomplianceledger/validator/tx";
import { MsgApproveDisableValidator } from "./types/zigbeealliance/distributedcomplianceledger/validator/tx";

import { Description as typeDescription} from "./types"
import { DisabledValidator as typeDisabledValidator} from "./types"
import { Grant as typeGrant} from "./types"
import { LastValidatorPower as typeLastValidatorPower} from "./types"
import { ProposedDisableValidator as typeProposedDisableValidator} from "./types"
import { RejectedDisableValidator as typeRejectedDisableValidator} from "./types"
import { Validator as typeValidator} from "./types"

export { MsgEnableValidator, MsgCreateValidator, MsgRejectDisableValidator, MsgProposeDisableValidator, MsgDisableValidator, MsgApproveDisableValidator };

type sendMsgEnableValidatorParams = {
  value: MsgEnableValidator,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateValidatorParams = {
  value: MsgCreateValidator,
  fee?: StdFee,
  memo?: string
};

type sendMsgRejectDisableValidatorParams = {
  value: MsgRejectDisableValidator,
  fee?: StdFee,
  memo?: string
};

type sendMsgProposeDisableValidatorParams = {
  value: MsgProposeDisableValidator,
  fee?: StdFee,
  memo?: string
};

type sendMsgDisableValidatorParams = {
  value: MsgDisableValidator,
  fee?: StdFee,
  memo?: string
};

type sendMsgApproveDisableValidatorParams = {
  value: MsgApproveDisableValidator,
  fee?: StdFee,
  memo?: string
};


type msgEnableValidatorParams = {
  value: MsgEnableValidator,
};

type msgCreateValidatorParams = {
  value: MsgCreateValidator,
};

type msgRejectDisableValidatorParams = {
  value: MsgRejectDisableValidator,
};

type msgProposeDisableValidatorParams = {
  value: MsgProposeDisableValidator,
};

type msgDisableValidatorParams = {
  value: MsgDisableValidator,
};

type msgApproveDisableValidatorParams = {
  value: MsgApproveDisableValidator,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgEnableValidator({ value, fee, memo }: sendMsgEnableValidatorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgEnableValidator: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgEnableValidator({ value: MsgEnableValidator.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgEnableValidator: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateValidator({ value, fee, memo }: sendMsgCreateValidatorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateValidator: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateValidator({ value: MsgCreateValidator.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateValidator: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRejectDisableValidator({ value, fee, memo }: sendMsgRejectDisableValidatorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRejectDisableValidator: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRejectDisableValidator({ value: MsgRejectDisableValidator.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRejectDisableValidator: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgProposeDisableValidator({ value, fee, memo }: sendMsgProposeDisableValidatorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgProposeDisableValidator: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgProposeDisableValidator({ value: MsgProposeDisableValidator.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgProposeDisableValidator: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDisableValidator({ value, fee, memo }: sendMsgDisableValidatorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDisableValidator: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDisableValidator({ value: MsgDisableValidator.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDisableValidator: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgApproveDisableValidator({ value, fee, memo }: sendMsgApproveDisableValidatorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgApproveDisableValidator: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgApproveDisableValidator({ value: MsgApproveDisableValidator.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgApproveDisableValidator: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgEnableValidator({ value }: msgEnableValidatorParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.validator.MsgEnableValidator", value: MsgEnableValidator.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgEnableValidator: Could not create message: ' + e.message)
			}
		},
		
		msgCreateValidator({ value }: msgCreateValidatorParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.validator.MsgCreateValidator", value: MsgCreateValidator.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateValidator: Could not create message: ' + e.message)
			}
		},
		
		msgRejectDisableValidator({ value }: msgRejectDisableValidatorParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.validator.MsgRejectDisableValidator", value: MsgRejectDisableValidator.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRejectDisableValidator: Could not create message: ' + e.message)
			}
		},
		
		msgProposeDisableValidator({ value }: msgProposeDisableValidatorParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.validator.MsgProposeDisableValidator", value: MsgProposeDisableValidator.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgProposeDisableValidator: Could not create message: ' + e.message)
			}
		},
		
		msgDisableValidator({ value }: msgDisableValidatorParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.validator.MsgDisableValidator", value: MsgDisableValidator.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDisableValidator: Could not create message: ' + e.message)
			}
		},
		
		msgApproveDisableValidator({ value }: msgApproveDisableValidatorParams): EncodeObject {
			try {
				return { typeUrl: "/zigbeealliance.distributedcomplianceledger.validator.MsgApproveDisableValidator", value: MsgApproveDisableValidator.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgApproveDisableValidator: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Description: getStructure(typeDescription.fromPartial({})),
						DisabledValidator: getStructure(typeDisabledValidator.fromPartial({})),
						Grant: getStructure(typeGrant.fromPartial({})),
						LastValidatorPower: getStructure(typeLastValidatorPower.fromPartial({})),
						ProposedDisableValidator: getStructure(typeProposedDisableValidator.fromPartial({})),
						RejectedDisableValidator: getStructure(typeRejectedDisableValidator.fromPartial({})),
						Validator: getStructure(typeValidator.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			ZigbeeallianceDistributedcomplianceledgerValidator: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;