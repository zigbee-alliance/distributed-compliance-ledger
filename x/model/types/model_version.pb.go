// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/model/model_version.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ModelVersion struct {
	Vid                          int32  `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Pid                          int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	SoftwareVersion              uint32 `protobuf:"varint,3,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	SoftwareVersionString        string `protobuf:"bytes,4,opt,name=softwareVersionString,proto3" json:"softwareVersionString,omitempty"`
	CdVersionNumber              int32  `protobuf:"varint,5,opt,name=cdVersionNumber,proto3" json:"cdVersionNumber,omitempty"`
	FirmwareInformation          string `protobuf:"bytes,6,opt,name=firmwareInformation,proto3" json:"firmwareInformation,omitempty"`
	SoftwareVersionValid         bool   `protobuf:"varint,7,opt,name=softwareVersionValid,proto3" json:"softwareVersionValid,omitempty"`
	OtaUrl                       string `protobuf:"bytes,8,opt,name=otaUrl,proto3" json:"otaUrl,omitempty"`
	OtaFileSize                  uint64 `protobuf:"varint,9,opt,name=otaFileSize,proto3" json:"otaFileSize,omitempty"`
	OtaChecksum                  string `protobuf:"bytes,10,opt,name=otaChecksum,proto3" json:"otaChecksum,omitempty"`
	OtaChecksumType              int32  `protobuf:"varint,11,opt,name=otaChecksumType,proto3" json:"otaChecksumType,omitempty"`
	MinApplicableSoftwareVersion uint32 `protobuf:"varint,12,opt,name=minApplicableSoftwareVersion,proto3" json:"minApplicableSoftwareVersion,omitempty"`
	MaxApplicableSoftwareVersion uint32 `protobuf:"varint,13,opt,name=maxApplicableSoftwareVersion,proto3" json:"maxApplicableSoftwareVersion,omitempty"`
	ReleaseNotesUrl              string `protobuf:"bytes,14,opt,name=releaseNotesUrl,proto3" json:"releaseNotesUrl,omitempty"`
	Creator                      string `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`
	SchemaVersion                uint32 `protobuf:"varint,16,opt,name=schemaVersion,proto3" json:"schemaVersion,omitempty"`
	SpecificationVersion         uint32 `protobuf:"varint,17,opt,name=specificationVersion,proto3" json:"specificationVersion,omitempty"`
}

func (m *ModelVersion) Reset()         { *m = ModelVersion{} }
func (m *ModelVersion) String() string { return proto.CompactTextString(m) }
func (*ModelVersion) ProtoMessage()    {}
func (*ModelVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a6cd95628709428, []int{0}
}
func (m *ModelVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelVersion.Merge(m, src)
}
func (m *ModelVersion) XXX_Size() int {
	return m.Size()
}
func (m *ModelVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelVersion.DiscardUnknown(m)
}

var xxx_messageInfo_ModelVersion proto.InternalMessageInfo

func (m *ModelVersion) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *ModelVersion) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ModelVersion) GetSoftwareVersion() uint32 {
	if m != nil {
		return m.SoftwareVersion
	}
	return 0
}

func (m *ModelVersion) GetSoftwareVersionString() string {
	if m != nil {
		return m.SoftwareVersionString
	}
	return ""
}

func (m *ModelVersion) GetCdVersionNumber() int32 {
	if m != nil {
		return m.CdVersionNumber
	}
	return 0
}

func (m *ModelVersion) GetFirmwareInformation() string {
	if m != nil {
		return m.FirmwareInformation
	}
	return ""
}

func (m *ModelVersion) GetSoftwareVersionValid() bool {
	if m != nil {
		return m.SoftwareVersionValid
	}
	return false
}

func (m *ModelVersion) GetOtaUrl() string {
	if m != nil {
		return m.OtaUrl
	}
	return ""
}

func (m *ModelVersion) GetOtaFileSize() uint64 {
	if m != nil {
		return m.OtaFileSize
	}
	return 0
}

func (m *ModelVersion) GetOtaChecksum() string {
	if m != nil {
		return m.OtaChecksum
	}
	return ""
}

func (m *ModelVersion) GetOtaChecksumType() int32 {
	if m != nil {
		return m.OtaChecksumType
	}
	return 0
}

func (m *ModelVersion) GetMinApplicableSoftwareVersion() uint32 {
	if m != nil {
		return m.MinApplicableSoftwareVersion
	}
	return 0
}

func (m *ModelVersion) GetMaxApplicableSoftwareVersion() uint32 {
	if m != nil {
		return m.MaxApplicableSoftwareVersion
	}
	return 0
}

func (m *ModelVersion) GetReleaseNotesUrl() string {
	if m != nil {
		return m.ReleaseNotesUrl
	}
	return ""
}

func (m *ModelVersion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ModelVersion) GetSchemaVersion() uint32 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

func (m *ModelVersion) GetSpecificationVersion() uint32 {
	if m != nil {
		return m.SpecificationVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*ModelVersion)(nil), "zigbeealliance.distributedcomplianceledger.model.ModelVersion")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/model/model_version.proto", fileDescriptor_2a6cd95628709428)
}

var fileDescriptor_2a6cd95628709428 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xb3, 0xb4, 0x49, 0x5b, 0xb7, 0xa1, 0xc5, 0x14, 0x64, 0x10, 0x5a, 0xad, 0x10, 0x87,
	0xbd, 0x24, 0xa9, 0x0a, 0x2f, 0xd0, 0x80, 0x2a, 0x71, 0xa0, 0x87, 0x0d, 0xf4, 0xc0, 0xa5, 0x78,
	0xed, 0x49, 0x62, 0x61, 0xc7, 0x2b, 0xdb, 0x29, 0x6d, 0x9f, 0x82, 0x87, 0xe1, 0x21, 0x38, 0x56,
	0x9c, 0x38, 0xa2, 0xe4, 0xc2, 0x63, 0x20, 0x7b, 0x37, 0x22, 0x5d, 0xa5, 0xb9, 0xac, 0xd6, 0xdf,
	0xfc, 0xf3, 0x7b, 0x66, 0x67, 0x07, 0xbd, 0xbb, 0x11, 0xa3, 0x1c, 0x80, 0x4a, 0x29, 0xe8, 0x84,
	0x41, 0x8f, 0x0b, 0xeb, 0x8c, 0xc8, 0xa7, 0x0e, 0x38, 0xd3, 0xaa, 0x28, 0xa9, 0x04, 0x3e, 0x02,
	0xd3, 0x53, 0x9a, 0x83, 0x2c, 0x9f, 0x17, 0x97, 0x60, 0xac, 0xd0, 0x93, 0x6e, 0x61, 0xb4, 0xd3,
	0xf8, 0xe8, 0xae, 0x4b, 0x77, 0x8d, 0x4b, 0x37, 0xe4, 0x3f, 0x7f, 0xc6, 0xb4, 0x55, 0xda, 0x5e,
	0x84, 0xfc, 0x5e, 0x79, 0x28, 0xcd, 0x5e, 0xfe, 0x6d, 0xa2, 0xbd, 0x0f, 0x5e, 0x74, 0x5e, 0xde,
	0x81, 0x0f, 0xd0, 0xc6, 0xa5, 0xe0, 0x24, 0x4a, 0xa2, 0xb4, 0x99, 0xf9, 0x57, 0x4f, 0x0a, 0xc1,
	0xc9, 0x83, 0x92, 0x14, 0x82, 0xe3, 0x14, 0xed, 0x5b, 0x3d, 0x74, 0xdf, 0xa8, 0x81, 0x2a, 0x8d,
	0x6c, 0x24, 0x51, 0xda, 0xce, 0xea, 0x18, 0xbf, 0x41, 0x4f, 0x6a, 0x68, 0xe0, 0x8c, 0x98, 0x8c,
	0xc8, 0x66, 0x12, 0xa5, 0x3b, 0xd9, 0xea, 0xa0, 0xf7, 0x67, 0xbc, 0x42, 0x67, 0x53, 0x95, 0x83,
	0x21, 0xcd, 0x70, 0x7b, 0x1d, 0xe3, 0x23, 0xf4, 0x78, 0x28, 0x8c, 0xf2, 0x16, 0xef, 0x27, 0x43,
	0x6d, 0x14, 0x75, 0xbe, 0x9a, 0x56, 0x70, 0x5f, 0x15, 0xc2, 0xc7, 0xe8, 0xb0, 0x76, 0xe9, 0x39,
	0x95, 0x82, 0x93, 0xad, 0x24, 0x4a, 0xb7, 0xb3, 0x95, 0x31, 0xfc, 0x14, 0xb5, 0xb4, 0xa3, 0x9f,
	0x8c, 0x24, 0xdb, 0xc1, 0xb8, 0x3a, 0xe1, 0x04, 0xed, 0x6a, 0x47, 0x4f, 0x85, 0x84, 0x81, 0xb8,
	0x01, 0xb2, 0x93, 0x44, 0xe9, 0x66, 0xb6, 0x8c, 0x2a, 0xc5, 0xdb, 0x31, 0xb0, 0xaf, 0x76, 0xaa,
	0x08, 0x0a, 0xe9, 0xcb, 0xc8, 0xf7, 0xba, 0x74, 0xfc, 0x78, 0x5d, 0x00, 0xd9, 0x2d, 0x7b, 0xad,
	0x61, 0xdc, 0x47, 0x2f, 0x94, 0x98, 0x9c, 0x14, 0x85, 0x14, 0x8c, 0xe6, 0x12, 0x06, 0xb5, 0x11,
	0xec, 0x85, 0x11, 0xac, 0xd5, 0x04, 0x0f, 0x7a, 0x75, 0xbf, 0x47, 0xbb, 0xf2, 0x58, 0xa3, 0xf1,
	0x15, 0x1b, 0x90, 0x40, 0x2d, 0x9c, 0x69, 0x07, 0xd6, 0x7f, 0x96, 0x87, 0xa1, 0xaf, 0x3a, 0xc6,
	0xc7, 0x68, 0x8b, 0x19, 0xa0, 0x4e, 0x1b, 0xb2, 0xef, 0x15, 0x7d, 0xf2, 0xeb, 0x47, 0xe7, 0xb0,
	0xfa, 0xff, 0x4e, 0x38, 0x37, 0x60, 0x6d, 0x39, 0xf2, 0x6c, 0x21, 0xc4, 0xaf, 0x50, 0xdb, 0xb2,
	0x31, 0x28, 0xba, 0x28, 0xe9, 0x20, 0x94, 0x74, 0x17, 0x86, 0x29, 0x16, 0xc0, 0xc4, 0x50, 0xb0,
	0x30, 0xd6, 0x85, 0xf8, 0x51, 0x10, 0xaf, 0x8c, 0xf5, 0xbf, 0xfc, 0x9c, 0xc5, 0xd1, 0xed, 0x2c,
	0x8e, 0xfe, 0xcc, 0xe2, 0xe8, 0xfb, 0x3c, 0x6e, 0xdc, 0xce, 0xe3, 0xc6, 0xef, 0x79, 0xdc, 0xf8,
	0x7c, 0x3a, 0x12, 0x6e, 0x3c, 0xcd, 0xbb, 0x4c, 0xab, 0x5e, 0xb9, 0x5c, 0x9d, 0x55, 0x3b, 0xda,
	0xf9, 0xbf, 0x5e, 0x9d, 0x6a, 0x4b, 0xaf, 0xaa, 0x3d, 0x75, 0xd7, 0x05, 0xd8, 0xbc, 0x15, 0x76,
	0xea, 0xf5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0xb7, 0x18, 0x35, 0xe8, 0x03, 0x00, 0x00,
}

func (m *ModelVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpecificationVersion != 0 {
		i = encodeVarintModelVersion(dAtA, i, uint64(m.SpecificationVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.SchemaVersion != 0 {
		i = encodeVarintModelVersion(dAtA, i, uint64(m.SchemaVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintModelVersion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ReleaseNotesUrl) > 0 {
		i -= len(m.ReleaseNotesUrl)
		copy(dAtA[i:], m.ReleaseNotesUrl)
		i = encodeVarintModelVersion(dAtA, i, uint64(len(m.ReleaseNotesUrl)))
		i--
		dAtA[i] = 0x72
	}
	if m.MaxApplicableSoftwareVersion != 0 {
		i = encodeVarintModelVersion(dAtA, i, uint64(m.MaxApplicableSoftwareVersion))
		i--
		dAtA[i] = 0x68
	}
	if m.MinApplicableSoftwareVersion != 0 {
		i = encodeVarintModelVersion(dAtA, i, uint64(m.MinApplicableSoftwareVersion))
		i--
		dAtA[i] = 0x60
	}
	if m.OtaChecksumType != 0 {
		i = encodeVarintModelVersion(dAtA, i, uint64(m.OtaChecksumType))
		i--
		dAtA[i] = 0x58
	}
	if len(m.OtaChecksum) > 0 {
		i -= len(m.OtaChecksum)
		copy(dAtA[i:], m.OtaChecksum)
		i = encodeVarintModelVersion(dAtA, i, uint64(len(m.OtaChecksum)))
		i--
		dAtA[i] = 0x52
	}
	if m.OtaFileSize != 0 {
		i = encodeVarintModelVersion(dAtA, i, uint64(m.OtaFileSize))
		i--
		dAtA[i] = 0x48
	}
	if len(m.OtaUrl) > 0 {
		i -= len(m.OtaUrl)
		copy(dAtA[i:], m.OtaUrl)
		i = encodeVarintModelVersion(dAtA, i, uint64(len(m.OtaUrl)))
		i--
		dAtA[i] = 0x42
	}
	if m.SoftwareVersionValid {
		i--
		if m.SoftwareVersionValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.FirmwareInformation) > 0 {
		i -= len(m.FirmwareInformation)
		copy(dAtA[i:], m.FirmwareInformation)
		i = encodeVarintModelVersion(dAtA, i, uint64(len(m.FirmwareInformation)))
		i--
		dAtA[i] = 0x32
	}
	if m.CdVersionNumber != 0 {
		i = encodeVarintModelVersion(dAtA, i, uint64(m.CdVersionNumber))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SoftwareVersionString) > 0 {
		i -= len(m.SoftwareVersionString)
		copy(dAtA[i:], m.SoftwareVersionString)
		i = encodeVarintModelVersion(dAtA, i, uint64(len(m.SoftwareVersionString)))
		i--
		dAtA[i] = 0x22
	}
	if m.SoftwareVersion != 0 {
		i = encodeVarintModelVersion(dAtA, i, uint64(m.SoftwareVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.Pid != 0 {
		i = encodeVarintModelVersion(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if m.Vid != 0 {
		i = encodeVarintModelVersion(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintModelVersion(dAtA []byte, offset int, v uint64) int {
	offset -= sovModelVersion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ModelVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vid != 0 {
		n += 1 + sovModelVersion(uint64(m.Vid))
	}
	if m.Pid != 0 {
		n += 1 + sovModelVersion(uint64(m.Pid))
	}
	if m.SoftwareVersion != 0 {
		n += 1 + sovModelVersion(uint64(m.SoftwareVersion))
	}
	l = len(m.SoftwareVersionString)
	if l > 0 {
		n += 1 + l + sovModelVersion(uint64(l))
	}
	if m.CdVersionNumber != 0 {
		n += 1 + sovModelVersion(uint64(m.CdVersionNumber))
	}
	l = len(m.FirmwareInformation)
	if l > 0 {
		n += 1 + l + sovModelVersion(uint64(l))
	}
	if m.SoftwareVersionValid {
		n += 2
	}
	l = len(m.OtaUrl)
	if l > 0 {
		n += 1 + l + sovModelVersion(uint64(l))
	}
	if m.OtaFileSize != 0 {
		n += 1 + sovModelVersion(uint64(m.OtaFileSize))
	}
	l = len(m.OtaChecksum)
	if l > 0 {
		n += 1 + l + sovModelVersion(uint64(l))
	}
	if m.OtaChecksumType != 0 {
		n += 1 + sovModelVersion(uint64(m.OtaChecksumType))
	}
	if m.MinApplicableSoftwareVersion != 0 {
		n += 1 + sovModelVersion(uint64(m.MinApplicableSoftwareVersion))
	}
	if m.MaxApplicableSoftwareVersion != 0 {
		n += 1 + sovModelVersion(uint64(m.MaxApplicableSoftwareVersion))
	}
	l = len(m.ReleaseNotesUrl)
	if l > 0 {
		n += 1 + l + sovModelVersion(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovModelVersion(uint64(l))
	}
	if m.SchemaVersion != 0 {
		n += 2 + sovModelVersion(uint64(m.SchemaVersion))
	}
	if m.SpecificationVersion != 0 {
		n += 2 + sovModelVersion(uint64(m.SpecificationVersion))
	}
	return n
}

func sovModelVersion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModelVersion(x uint64) (n int) {
	return sovModelVersion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModelVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelVersion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			m.SoftwareVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersionString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVersionString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdVersionNumber", wireType)
			}
			m.CdVersionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdVersionNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareInformation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareInformation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersionValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoftwareVersionValid = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtaFileSize", wireType)
			}
			m.OtaFileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtaFileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtaChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtaChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtaChecksumType", wireType)
			}
			m.OtaChecksumType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtaChecksumType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinApplicableSoftwareVersion", wireType)
			}
			m.MinApplicableSoftwareVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinApplicableSoftwareVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxApplicableSoftwareVersion", wireType)
			}
			m.MaxApplicableSoftwareVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxApplicableSoftwareVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseNotesUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseNotesUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			m.SchemaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationVersion", wireType)
			}
			m.SpecificationVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecificationVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModelVersion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelVersion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModelVersion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModelVersion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModelVersion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModelVersion
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModelVersion
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModelVersion
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModelVersion        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModelVersion          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModelVersion = fmt.Errorf("proto: unexpected end of group")
)
